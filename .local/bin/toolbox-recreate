#!/bin/sh

script=${0##*/}
podman="command podman"
toolbox="command toolbox"
xargs="command xargs"

default=
doit=

while getopts "n" opt "$@"; do
	case ${opt} in
	n)	doit=echo ">>>";;
	*)	echo 1>&2 "Usage: ${script} [-n] [name]"
		exit 1 ;;
	esac
done
shift $((OPTIND - 1))

toolbox_name="$1"
name_cmd='. /run/.containerenv && printf "${name}"'

if [ -f /run/.containerenv ]; then
	container_name=$(eval ${name_cmd})
	echo 1>&2 "${script}: cannot be inside container \`${container_name}'"
	exit 2
fi

if [ -n "${toolbox_name}" ]; then
	run="${toolbox} run -c ${toolbox_name}"
else
	default=yes
	run="${toolbox} run"
fi

# Stop toolbox and remove it if it exists.
if ${run} /bin/sh -c true 2>/dev/null; then
	if [ -n "${default}" ]; then
		toolbox_name=$(${run} /bin/sh -c "eval ${name_cmd}")
	fi
	echo "Toolbox exists: ${toolbox_name}"
	echo "Stopping: ${toolbox_name}"
	${doit} ${podman} stop ${toolbox_name}
	if [ $? -gt 0 ]; then
		echo 1>&2 "${script}: container \`${toolbox_name}' is busy; close other sessions"
		exit 3
	fi
	echo "Removing: ${toolbox_name}"
	${doit} ${toolbox} rm ${toolbox_name}
	if [ $? -gt 0 ]; then
		echo 1>&2 "${script}: container \`${toolbox_name}' could not be removed"
		exit 4
	fi
fi

# Create the new toolbox.
if [ -n "${default}" ]; then
	# Create a new default toolbox with the latest Fedora release.
	${doit} ${toolbox} create
	if [ $? -gt 0 ]; then
		echo 1>&2 "${script}: error creating default toolbox"
		exit 5
	fi
else
	case ${toolbox_name} in
	*)
		# Create a new toolbox using default distro, image, and release.
		${doit} ${toolbox} create ${toolbox_name}
		;;
	esac
	if [ $? -gt 0 ]; then
		echo 1>&2 "${script}: error creating toolbox \`${toolbox_name}'"
		exit 5
	fi
fi

# Common packages to all containers.
${xargs} -rt ${doit} ${run} sudo dnf install -y <<- EOF
	tmux
	vim
EOF

if [ -n "${default}" ]; then
	: "Packages for the default toolbox container."
else
	: "Packages for non-default containers, matched by name."
	case ${toolbox_name} in
	steamship)
		${xargs} -rt ${doit} ${run} sudo dnf install -y <<- EOF
			bash
			dash
			ksh
			mksh
			oksh
			shellcheck
			yash
			zsh
		EOF
		;;
	esac
fi
