# shrc -- called for each invocation of an interactive shell

case X${SHRC_SOURCED} in
X)
	SHRC_SOURCED=yes

	###########################################################################
	# Shell functions and aliases

	########################################
	# Shell options

	if [ -n "${BASH_VERSION}${KSH_VERSION}${ZSH_VERSION}" ]; then
		set -o emacs			# emacs command-line editing mode
		set -o ignoreeof		# Don't exit on EOF (Ctrl-D)
		set -o notify			# Asynchronous reports on children
		#ulimit -c unlimited	# core dump size limit
		if [ -n "${KSH_VERSION}" ]; then
			set -o nohup		# Don't send jobs HUP on logout
		fi
		if [ -n "${BASH_VERSION}" ]; then
			shopt -s checkwinsize	# check window size after each command
		fi
	fi

	########################################
	# Command prompt

	shrc_container_name=
	if [ -f /run/.containerenv ]; then
		shrc_container_name=$(source /run/.containerenv && printf $name)
	fi

	if [ -n "${BASH_VERSION}${KSH_VERSION}${ZSH_VERSION}" ]; then
		esc_blue='[1;34m'
		esc_cyan='[1;36m'
		esc_gray='[1;30m'
		esc_green='[1;32m'
		esc_purple='[1;35m'
		esc_red='[1;31m'
		esc_white='[1;37m'
		esc_yellow='[1;33m'
		esc_end='[m'
	else
		esc_blue=
		esc_cyan=
		esc_gray=
		esc_green=
		esc_purple=
		esc_red=
		esc_white=
		esc_yellow=
		esc_end=
	fi

	shrc_git_prompt_sourced=
	case ${SYSTYPE} in
	git-sdk-*)
		# Git For Windows automatically sources git-prompt.sh.
		shrc_git_prompt_sourced=yes
		;;
	esac
	if [ -z "${shrc_git_prompt_sourced}" ]; then
		if [ -n "${BASH_VERSION}${ZSH_VERSION}" ]; then
			# git-prompt.sh is designed for bash(1) and zsh(1).
			for shrc_git_prompt_path in \
				"${HOME}"/.config/shell \
				/usr/share/git-core/contrib/completion
			do
				if [ -f "${shrc_git_prompt_path}/git-prompt.sh" ]; then
					shrc_git_prompt_sourced=yes
				    . "${shrc_git_prompt_path}/git-prompt.sh"
					break
				fi
			done
			unset shrc_git_prompt_path
		fi
	fi
	if [ -n "${shrc_git_prompt_sourced}" ]; then
		# Configure __git_ps1 to show the state of working directory
		# relative to the branch.
		GIT_PS1_SHOWDIRTYSTATE=yes
		GIT_PS1_SHOWSTATESTATE=yes
		GIT_PS1_SHOWUNTRACKEDFILES=yes
	fi

	# Prompt section definitions
	if [ -n "${BASH_VERSION}" ]; then
		: ${shrc_prompt_host:='\h'}
		: ${shrc_prompt_pwd:='\W'}
		: ${shrc_prompt_user:='\u'}
	fi
	: ${shrc_prompt_host:=${HOSTNAME:+'${HOSTNAME}'}}
	: ${shrc_prompt_host:=${HOST:+'${HOST}'}}
	: ${shrc_prompt_host:='${SYSTYPE}'}
	: ${shrc_prompt_pwd:='${PWD##*/}'}
	: ${shrc_prompt_user:='${USER}'}

	# Start with a new line.
	PS1='
'
	PS1="${PS1}"'â”Œ '
	# Add the user if this is not localhost.
	if [ -n "${SSH_CONNECTION}" ]; then
		case ${USER} in
		root)	PS1="${PS1}${esc_red}${shrc_prompt_user}${esc_end}" ;;
		*)		PS1="${PS1}${esc_yellow}${shrc_prompt_user}${esc_end}" ;;
		esac
		PS1="${PS1} ${esc_white}in${esc_end} "
	fi
	# Add the last component of the current directory.
	PS1="${PS1}${esc_cyan}${shrc_prompt_pwd}${esc_end}"
	# Add the hostname if we're in an SSH session.
	if [ -n "${SSH_CONNECTION}" ]; then
		PS1="${PS1} ${esc_white}at${esc_end} ${esc_green}${shrc_prompt_host}${esc_end}"
	fi
	if [ -n "${shrc_git_prompt_sourced}" ]; then
		# Append Git status.
		shrc_git_status_fmt=" ${esc_white}on${esc_end} ${esc_purple}î‚  %s${esc_end}"
		PS1="${PS1}"'$(__git_ps1 "${shrc_git_status_fmt}")'
	fi
	# Add container name if we're in a container.
	if [ -n "${shrc_container_name}" ]; then
		PS1="${PS1} ${esc_white}on${esc_end} ${esc_cyan}â¬¢ (${shrc_container_name})${esc_end}"
	fi
	# Append a new line.
	PS1="${PS1}"'
'
	# Append a final prompt symbol.
	# NOTE: This should not contain any escape codes or else command-line
	#       editing may break.
	PS1="${PS1}"'â”” '

	unset esc_blue esc_cyan esc_gray
	unset esc_green esc_purple esc_red
	unset esc_white esc_yellow esc_end
	unset shrc_container_name
	unset shrc_prompt_host shrc_prompt_pwd shrc_prompt_symbol shrc_prompt_user

	########################################
	# Functions

	agent() {
		agent_env="${HOME}/.ssh/environment"
		case "${1}" in
		start)
			# Start ssh-agent(1) if not already started.
			shift
			/usr/bin/ssh-add -l >/dev/null 2>&1
			if [ "$?" = 2 ]; then
				if [ -r "${agent_env}" ]; then
					. "${agent_env}" >/dev/null
				fi
				/usr/bin/ssh-add -l >/dev/null 2>&1
				if [ "$?" = 2 ]; then
					( umask 066; /usr/bin/ssh-agent > "${agent_env}" )
					. "${agent_env}"
				fi
			fi
			;;
		stop)
			# Stop ssh-agent(1) if it is running.
			shift
			/usr/bin/ssh-add -l >/dev/null 2>&1
			[ "$?" = 2 ] || eval `/usr/bin/ssh-agent -k`
			;;
		esac
		unset agent_env
	}

	########################################
	# Aliases

	alias cp='cp -i'
	alias mv='mv -i'
	alias ls='ls -CF'
	alias ll='ls -lF'
	alias la='ls -aCF'

	case ${SYSTYPE} in
	cygwin|linux)
		# Assume that Cygwin and Linux use GNU ls(1).
		alias ls='ls -CF --color=auto'
		alias ll='ls -laF --color=auto --group-directories-first'
		;;
	esac
	case ${SYSTYPE} in
	cygwin)
		if [ -f '/drv/PortableApps/Notepad++Portable/Notepad++Portable.exe' ]; then
			alias npp='cygstart "/drv/PortableApps/Notepad++Portable/Notepad++Portable.exe"'
		fi
		alias tmux='/usr/bin/tmux -S ~/.tmux/socket'
		;;
	esac
	;;
esac
