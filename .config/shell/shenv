# $HOME/.shinit -- called for each invocation of a shell

case X${HOME_SHINIT_SOURCED} in
X)
	HOME_SHINIT_SOURCED=yes

	if [ -n "${KSH_VERSION}" ]; then
		# ${HOME}/.kshrc should be called for each invocation of a shell.
		if [ -f "${HOME}/.kshrc" ]; then
			. "${HOME}/.kshrc"
		fi
	fi

	###########################################################################
	# Shell environment

	case X${shinit_systype} in
	X)	case X${SHELL} in
		*/com.termux/*)
			shinit_systype=termux
			;;
		*)
			case X${MSYSTEM} in
			X)
				if [ -f /bin/cygwin1.dll ]; then
					shinit_systype=cygwin
				else
					shinit_systype=$(uname -s | tr '[:upper:]' '[:lower:]')
				fi
				;;
			*)
				if [ -f /git-bash.exe ]; then
					# Git for Windows
					case X${MSYSTEM} in
					XMSYS*)		shinit_systype=git-sdk-msys2 ;;
					XMINGW32)	shinit_systype=git-sdk-32 ;;
					XMINGW64)	shinit_systype=git-sdk-64 ;;
					*)		shinit_systype="git-sdk-${MSYSTEM}" ;;
					esac
				else
					# MSYS2
					case X${MSYSTEM} in
					XMSYS*)		shinit_systype=msys2 ;;
					XMINGW32)	shinit_systype=mingw32 ;;
					XMINGW64)	shinit_systype=mingw64 ;;
					*)		shinit_systype="${MSYSTEM}" ;;
					esac
				fi
				;;
			esac
		esac
		;;
	esac

	prepend_to_path() {
		case ":${PATH}:" in
		*:"${1}":*)
			;;
		*)
			PATH="${1}:${PATH}"
			;;
		esac
	}

	# Prepend system-specific directories to ${PATH}.
	case ${shinit_systype} in
	termux)
		export TERMUX_ROOT="/data/data/com.termux/files"
		prepend_to_path "${HOME}/local/bin"
		prepend_to_path "${HOME}/local/sbin"
		;;
	cygwin)
		if [ -d /drv/PortableApps/CommonFiles/node ]; then
			prepend_to_path /drv/PortableApps/CommonFiles/node
			prepend_to_path /drv/PortableApps/CommonFiles/node/Data/npm-global
		fi
		export LANG=$(/usr/bin/locale -uU)
		;;
	esac

	# Prepend user directories to ${PATH}.
	prepend_to_path "${HOME}/bin"
	prepend_to_path "${HOME}/.local/bin"

	unset prepend_to_path

	export PATH

	# Use vi(1) as the main editor.
	export EDITOR="/usr/bin/vi"

	###########################################################################
	# Shell functions and aliases

	# Check for interactive shell.
	case $- in
	*i*)
		########################################
		# Shell options

		if [ -n "${BASH_VERSION}${KSH_VERSION}${ZSH_VERSION}" ]; then
			set -o emacs			# emacs command-line editing mode
			set -o ignoreeof		# Don't exit on EOF (Ctrl-D)
			set -o notify			# Asynchronous reports on children
			#ulimit -c unlimited	# core dump size limit
			if [ -n "${KSH_VERSION}" ]; then
				set -o nohup		# Don't send jobs HUP on logout
			fi
			if [ -n "${BASH_VERSION}" ]; then
				shopt -s checkwinsize	# check window size after each command
			fi
		fi

		########################################
		# Command prompt

		: ${HOST:=${HOSTNAME}}
		: ${HOST:=${shinit_systype}}

		shinit_container_name=
		if [ -f /run/.containerenv ]; then
			shinit_container_name=$(source /run/.containerenv && printf $name)
		fi

		if [ -n "${BASH_VERSION}" -o -n "${KSH_VERSION}" ]; then
			esc_black='[1;30m'
			esc_blue='[1;34m'
			esc_brown='[1;33m'
			esc_cyan='[1;36m'
			esc_gray='[1;37m'
			esc_green='[1;32m'
			esc_purple='[1;35m'
			esc_red='[1;31m'
			esc_end='[m'
		else
			esc_black=
			esc_blue=
			esc_brown=
			esc_cyan=
			esc_gray=
			esc_green=
			esc_purple=
			esc_red=
			esc_end=
		fi

		shinit_git_prompt_sourced=
		case ${shinit_systype} in
		git-sdk-*)
			# Git For Windows automatically sources git-prompt.sh.
			shinit_git_prompt_sourced=yes
			;;
		esac
		if [ -z "${shinit_git_prompt_sourced}" ]; then
			if [ -n "${BASH_VERSION}" ]; then
				# git-prompt.sh is designed for bash(1) and zsh(1).
				for shinit_git_prompt_path in \
					/usr/share/git-core/contrib/completion
				do
					if [ -f "${shinit_git_prompt_path}/git-prompt.sh" ]; then
						shinit_git_prompt_sourced=yes
					    . "${shinit_git_prompt_path}/git-prompt.sh"
						break
					fi
				done
				unset shinit_git_prompt_path
			fi
		fi
		if [ -n "${shinit_git_prompt_sourced}" ]; then
			# Configure __git_ps1 to show the state of working directory
			# relative to the branch.
			GIT_PS1_SHOWDIRTYSTATE=yes
			GIT_PS1_SHOWSTATESTATE=yes
			GIT_PS1_SHOWUNTRACKEDFILES=yes
		fi

		# Start with a new line.
		PS1='
'
		if [ -n "${SSH_CLIENT}" ]; then
			case ${USER} in
			root)	PS1="${PS1}${esc_red}root${esc_end}" ;;
			*)		PS1="${PS1}${esc_brown}"'${USER}'"${esc_end}" ;;
			esac
			PS1="${PS1} in "
		fi
		# Add the last component of the current directory.
		PS1="${PS1}${esc_cyan}"'${PWD##*/}'"${esc_end}"
		# Add the hostname if we're in an SSH session.
		if [ -n "${SSH_CLIENT}" ]; then
			PS1="${PS1} at ${esc_green}"'${HOST}'"${esc_end}"
		fi
		if [ -n "${shinit_git_prompt_sourced}" ]; then
			# Append Git status.
			shinit_git_status_fmt=" on ${esc_purple}%s${esc_end}"
			PS1="${PS1}"'$(__git_ps1 "${shinit_git_status_fmt}")'
		fi
		# Add container name if we're in a container.
		if [ -n "${shinit_container_name}" ]; then
			PS1="${PS1} on ${esc_cyan}"'â¬¢ (${shinit_container_name})'"${esc_end}"
		fi
		# Append a new line followed by '$' to end the prompt.
		PS1="${PS1}"'
\$ '

		unset esc_black esc_blue esc_brown
		unset esc_cyan esc_gray esc_green
		unset esc_purple esc_red esc_end

		########################################
		# Functions

		agent() {
			agent_env="${HOME}/.ssh/environment"
			case "${1}" in
			start)
				# Start ssh-agent(1) if not already started.
				shift
				/usr/bin/ssh-add -l >/dev/null 2>&1
				if [ "$?" = 2 ]; then
					if [ -r "${agent_env}" ]; then
						. "${agent_env}" >/dev/null
					fi
					/usr/bin/ssh-add -l >/dev/null 2>&1
					if [ "$?" = 2 ]; then
						( umask 066; /usr/bin/ssh-agent > "${agent_env}" )
						. "${agent_env}"
					fi
				fi
				;;
			stop)
				# Stop ssh-agent(1) if it is running.
				shift
				/usr/bin/ssh-add -l >/dev/null 2>&1
				[ "$?" = 2 ] || eval `/usr/bin/ssh-agent -k`
				;;
			esac
			unset agent_env
		}

		########################################
		# Aliases

		alias cp='cp -i'
		alias mv='mv -i'
		alias ls='ls -CF'
		alias ll='ls -lF'
		alias la='ls -aCF'

		case ${shinit_systype} in
		cygwin|linux)
			# Assume that Cygwin and Linux use GNU ls(1).
			alias ls='ls -CF --color=auto'
			alias ll='ls -laF --color=auto --group-directories-first'
			;;
		esac
		case ${shinit_systype} in
		cygwin)
			if [ -f '/drv/PortableApps/Notepad++Portable/Notepad++Portable.exe' ]; then
				alias npp='cygstart "/drv/PortableApps/Notepad++Portable/Notepad++Portable.exe"'
			fi
			alias tmux='/usr/bin/tmux -S ~/.tmux/socket'
			;;
		esac
		;;
	esac

	unset shinit_systype
	;;
esac
